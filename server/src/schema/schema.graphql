type User {
    id: ID
    name: String
    role: String
    playlists(id: ID, pagesize: Int, after: String): [Playlist]
}

type Playlist {
    id: ID!
    title: String
    description: String
    owner: User
    tracks: [Track!]
    created: String,
    updated: String,
}

type Track {
    id: ID
    title: String
    artist: String
    album: String
    genre: String
    year: Int
    files: [File!]
    links: [Link]
    created: String,
    updated: String,
}

type File {
    id: ID
    filename: String,
    status: String,
    created: String,
    updated: String,
}

type Link {
    id: ID
    uri: String
    type: String
    created: String,
    updated: String,
}

type Query {
    whoami: User,
    playlist(playlist: ID): Playlist
    playlists(id: ID, pageSize: Int, after: String): [Playlist!]
    user(id: ID): User
    users(pageSize: Int, after: String): [User]
    track(id: ID): Track
    tracks(playlist: ID): [Track!]
}

input TrackInput {
    title: String!
    artist: String!
    album: String!
    genre: String,
    year: Int,
}

input TrackInputWithOptionalId {
    id: ID
    title: String
    artist: String
    album: String
    genre: String
    year: Int
}

input PlaylistInput {
    title: String!
    description: String
    tracks: [TrackInput!]
}

input PlaylistInputWithId {
    id: ID!
    title: String
    description: String
    tracks: [TrackInputWithOptionalId!]
}

input UserInput {
    name: String
    role: Int
}

type PlainMutationResponse {
    success: Boolean!
    message: String!
}

type PlaylistMutationResponse {
    success: Boolean!
    message: String!
    playlist: Playlist
}

type TrackMutationResponse {
    success: Boolean!
    message: String!
    track: Track
}

type UserMutationResponse {
    success: Boolean!
    message: String!
    user: User
}

type Mutation {
    createPlaylist(data: PlaylistInput): PlaylistMutationResponse
    deletePlaylist(id: ID): PlainMutationResponse
    updatePlaylist(data: PlaylistInputWithId): PlaylistMutationResponse
    createTrack(playlistId: ID, data: TrackInput, order: Int): TrackMutationResponse
    deleteTrack(playlistId: ID, trackId: ID): PlainMutationResponse
    createUser(data: UserInput): UserMutationResponse
}
